// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role { GK CB LB RB CDM CM CAM LW RW ST }
enum MatchStatus { planned played }

model Player {
  id                 String   @id @default(uuid())
  gamertag           String
  platform           String
  contactTelegram    String?
  contactDiscord     String?
  preferredRoles     String              // "GK;CB;LB;RB;CDM;CM;CAM;LW;RW;ST"
  primaryRole        Role?
  availability       String?
  mic                Boolean  @default(true)
  isCaptainCandidate Boolean  @default(false)
  ratingInit         Float    @default(0)
  reputationInit     Int      @default(50)
  createdAt          DateTime @default(now())

  teamMembers        TeamMember[]
  draftPicks         DraftPick[]
  lineups            Lineup[]
  reputationEvents   ReputationEvent[]
}

model DraftSession {
  id            String   @id @default(uuid())
  name          String
  status        String   @default("planned") // planned | live | finished
  snake         Boolean  @default(true)
  forceGkRound  Int      @default(3)
  createdAt     DateTime @default(now())

  teams         Team[]
  picks         DraftPick[]
  matches       Match[]
  turns         DraftTurn?
}

model Team {
  id           String   @id @default(uuid())
  sessionId    String?
  name         String
  color        String?
  captainId    String?
  draftOrder   Int?
  createdAt    DateTime @default(now())

  session      DraftSession? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  captain      Player?       @relation(fields: [captainId], references: [id])
  members      TeamMember[]
  homeMatches  Match[]       @relation("homeTeam")
  awayMatches  Match[]       @relation("awayTeam")

  @@unique([sessionId, name])
}

model TeamMember {
  teamId       String
  playerId     String
  roleAtSignup Role?
  joinedAt     DateTime @default(now())
  team         Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  player       Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@id([teamId, playerId])
}

model DraftPick {
  id          String   @id @default(uuid())
  sessionId   String
  round       Int
  pickOverall Int
  teamId      String
  playerId    String
  isAutopick  Boolean  @default(false)
  comment     String?
  madeAt      DateTime @default(now())

  session     DraftSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  player      Player       @relation(fields: [playerId], references: [id])

  @@unique([sessionId, pickOverall])
  @@unique([sessionId, playerId])
}

model DraftTurn {
  sessionId    String   @id
  currentRound Int      @default(1)
  pickInRound  Int      @default(1)
  pickDeadline DateTime?
  isReversed   Boolean  @default(false)
  session      DraftSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model Match {
  id           String   @id @default(uuid())
  sessionId    String
  round        Int
  slot         Int
  homeTeamId   String
  awayTeamId   String
  homeGoals    Int?
  awayGoals    Int?
  status       MatchStatus @default(planned)
  reportLink   String?
  verification Int        @default(0)  // 0 none, 1 home ok, 2 both ok
  createdAt    DateTime   @default(now())

  session      DraftSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  homeTeam     Team         @relation("homeTeam", fields: [homeTeamId], references: [id])
  awayTeam     Team         @relation("awayTeam", fields: [awayTeamId], references: [id])
  lineups      Lineup[]

  @@unique([sessionId, slot])
}

model Lineup {
  matchId       String
  teamId        String
  playerId      String
  rolePlayed    Role?
  minutes       Int?
  goals         Int?    @default(0)
  assists       Int?    @default(0)
  saves         Int?    @default(0)
  shots         Int?    @default(0)
  passes        Int?    @default(0)
  interceptions Int?    @default(0)
  tackles       Int?    @default(0)
  dribbles      Int?    @default(0)
  ratingCaptain Float?
  ratingSystem  Float?
  mom           Boolean  @default(false)
  notes         String?

  match         Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  team          Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  player        Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@id([matchId, teamId, playerId])
}

model ReputationEvent {
  id        String   @id @default(uuid())
  playerId  String
  sessionId String?
  date      DateTime @default(now())
  type      String
  points    Int
  source    String   @default("system")
  matchId   String?
  comment   String?

  player    Player         @relation(fields: [playerId], references: [id], onDelete: Cascade)
  session   DraftSession?  @relation(fields: [sessionId], references: [id])
}
